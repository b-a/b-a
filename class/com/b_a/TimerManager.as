package com.b-a {	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.utils.getTimer;		public class TimerManager {		private static var _instance:TimerManager;		private var _timer:Timer;		private var _timerList:Array;		/*		 * 獲取單例類TimerManager的實例		 * 返回值：		 *         _instance		 */		public static function getInstance():TimerManager {			if (_instance == null)				_instance = new TimerManager();							return _instance;		}		/*		 * 構造函數，用於防止單例類生成多個實例		 */		public function TimerManager() {			if (_instance != null)				trace("單例類，請不要實例化");							return;		}		/*         * 註冊計時器，首先檢查id是否存在，如果不存在，就將定時器插入數組_timerList中；否則啥都不做         * 參數：         *         id - 唯一標識一個定時器         *         interval - 刷新間隔，單位為0.5秒（500ms)         *         repeatCount - 重復次數         *         callback - 回調函數，每隔interval就執行一次         *         ...args - 回調函數參數 ///注意，參數實際並沒有用到，有待改進         * 返回值：空         */		public function registerTimer(id:String, interval:int, repeatCount:int, callback:Function, ...args):void {			if (_timerList == null)			 	_timerList = new Array();			if ( check(id) == -1 ) {				_timerList.push( { id:id, interval:interval, repeatCount:repeatCount, callback:callback, args:args, tempInterval:0 } );				startTimer();			} else {				trace(id + "已經存在！！！");			}		}        /*         * 移除計時器，首先檢查id是否存在，如果存在，從數組_timerList中刪除定時器         * 參數：         *         id - 唯一標識一個定時器         * 返回值：空         */		public function removeTimer(id:String):void {			//Adam+			if (_timerList != null) {				var index:int = check(id);				if (index != -1) {					_timerList.splice(index, 1);					//Adam+					if (index == 0) {						stopTimer();					}					//Adam-				}			}			//Adam-		}        /*         * 檢查指定id的Object是否在_timerList數組中，         * 如果存在返回在_timerList數組中的索引；否則返回-1         * 參數：         *         id - String，唯一標識一個定時器         * 返回值：         *         -1 or 指定Object的索引         */		 private function check(id:String):int {			 var len:int = _timerList.length;			 for (var index:int = 0; index < len; index++) {				 if (_timerList[index]["id"] == id) {					 return index;				}			}			return -1;		}        /*         * 啟動計時器         * 如果_timer為空，生成一個定時器Timer，事件發生間隔500ms；         * 監聽TimerEvent.TIMER，處理函數為timerHandler         */		private function startTimer():void {			if (_timer == null)				_timer = new Timer(500);							if (!_timer.running) {				_timer.addEventListener(TimerEvent.TIMER, timerHandler);				_timer.start();			}		}        /*         * 停止計時器         * 當_timerList數組為空時，即沒有用戶註冊定時器，停止_timer         */		private function stopTimer():void {			_timer.stop();			_timer.removeEventListener(TimerEvent.TIMER, timerHandler);		}        /*         * 運行計時器         * 如果_timerList數組為空，調用stopTimer()停止計時器；         * 否則判斷_timerList數組中的定時器間隔是否達到，         *         如果達到，就調用回調函數；         *         否則啥都不做         */		public function runTimer():void {			var timerComplete:Array = new Array();			var len:int = _timerList.length;			if (len == 0) {				stopTimer();				return;			}						for (var i:int = 0; i < len; i++) {				//運行TimerManager管理的所有計時器				_timerList[i]["tempInterval"] += 1;								//判斷是否已經經過interval間隔				if (_timerList[i]["tempInterval"] == _timerList[i]["interval"]) {					//如果callback不空，執行callback函數					if (_timerList[i]["callback"] != null) {						_timerList[i]["callback"](_timerList[i]["args"]);					}					//Adam+					if (_timerList[i] != undefined) {						_timerList[i]["tempInterval"] = 0;												//判斷初始repeatCount是否=0，如果註冊時為0，即無限次數						//否則每執行一次，就-1；然後判斷repeatCount是否=0，如果=0就移除計時器												if (_timerList[i]["repeatCount"] != 0) {							_timerList[i]["repeatCount"] -= 1;														if (_timerList[i]["repeatCount"] == 0) {								trace("執行完成......");																timerComplete.push(_timerList[i]["id"]);							}						}					}					//Adam-				}			}						//移除所有已完成的計時器			len = timerComplete.length;						if (len != 0) {				trace("移除所有已經完成的計時器...");								for (i = 0; i < len; i++) {					removeTimer(timerComplete.pop());				}			}		}        /*         * timerHandler是_timer的TimerEvent.TIMER事件處理函數         * 其中調用runTimer()，管理所有註冊的計時器         */		private function timerHandler(evt:TimerEvent):void {			runTimer();		}	}}